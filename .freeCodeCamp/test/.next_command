builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
__vsc_is_windows=0
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
__vsc_stable="$VSCODE_STABLE"
unset VSCODE_STABLE
[ "$__vsc_stable" = "0" ]
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
__vsc_is_windows=0
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
__vsc_stable="$VSCODE_STABLE"
unset VSCODE_STABLE
[ "$__vsc_stable" = "0" ]
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
__vsc_is_windows=0
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
__vsc_stable="$VSCODE_STABLE"
unset VSCODE_STABLE
[ "$__vsc_stable" = "0" ]
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
echo hello bash
touch questionnaire.sh
echo "echo hello questionnaire" >> questionnaire.sh
sh questionnaire.sh
bash questionnaire.sh
which bash
nano questionnaire.sh
./q
./questionnaire.sh
__vsc_prompt_cmd_original
__vsc_prompt_cmd_original
./questionnaire.sh
ls --color=auto -l
chmod +x questionnaire.sh
ls --color=auto -l
__vsc_prompt_cmd_original
./questionnaire
./questionnaire.sh
ls --color=auto -l
echo "ls -l" >> questionnaire.sh
./questionnaire.sh
nano questionnaire.sh
__vsc_prompt_cmd_original
__vsc_prompt_cmd_original
__vsc_prompt_cmd_original
nano questionnaire.sh
nano questionnaire.sh
nano questionnaire.sh
nano questionnaire.sh
echo "echo $QUESTION1" >> questionnaire.sh
nano questionnaire.sh
./questionnaire.sh
echo teste >> questionnaire.sh
nano questionnaire.sh
echo echo teste >> questionnaire.sh
nano questionnaire.sh
echo read NAME >> questionnaire.sh
__vsc_prompt_cmd_original
echo echo Hello "<name>" >> questionnaire.sh
nano questionnaire.sh
nano questionnaire.sh
nano questionnaire.sh
nano questionnaire.sh
./questionnaire.sh
nano questionnaire.sh
echo echo $QUESTION2 >> questionnaire.sh
nano questionnaire.sh
nano questionnaire.sh
echo read LOCATION
echo read LOCATION >> questionnaire.sh
nanoe questionnaire.sh
nano questionnaire.sh
nano questionnaire.sh
nano questionnaire.sh
./questionnaire.sh
nano questionnaire.sh
./questionnaire.sh
echo --help
man echo
nano questionnaire.sh
nano questionnaire.sh
./questionnaire.sh
nano questionnaire.sh
./questionnaire.sh
nano questionnaire.sh
echo echo $QUESTION3
echo echo $QUESTION3 >> questionnaire.sh
nano questionnaire.sh
echo read WEBSITE >> questionnaire.sh
nano questionnaire.sh
./questionnaire.sh
nano questionnaire.sh
nano questionnaire.sh
nano questionnaire.sh
./questionnaire.sh
touch countdown.sh
chmod +x countdown.sh
echo
cat questionnaire.sh
ls --color=auto
cat countdown.sh
cat countdown.sh
echo
cat countdown.sh
nano countdown.sh
cat countdown.sh
nano countdown.sh
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
__vsc_is_windows=0
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
__vsc_stable="$VSCODE_STABLE"
unset VSCODE_STABLE
[ "$__vsc_stable" = "0" ]
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
ls --color=auto
nano countdown.sh
echo "echo $*" >> countdown.sh
nano countdown.sh
./countdown.sh
./countdown.sh arg1 arg2 arg3
nano countdown.sh
./countdown.sh arg1 arg2 arg3
__vsc_prompt_cmd_original
help
man if
help if
nano countdown.sh
./countdown.sh arg1
./countdown.sh arg2
nano countdown.sh
./countdown.sh xxx
nano countdown.sh
nano countdown.sh
./countdown.sh 4
./countdown.sh 5
help
help [[ expression ]]
help test
nano countdown.sh
./countdown.sh 5
[[4 -le 5 ]]
[[ 4 -le 5 ]]
echo $?
[[ 4 -ge 5 ]]
echo $?
[[ 4 -ge 5 ]]
__vsc_prompt_cmd_original
[[ 10 != 5 ]]
[[ 10 == 5 ]]
[[ 10 -ne 5 ]]
[[ 10 -ne 5 ]]
bad_command
bad_command
ls --color=auto
ls --color=auto -y
help test
[[ -a countdown.sh ]]
[[ -a bad_file.txt ]]
[[ -x countdown.sh ]]
help [[ expression ]]
[[ -x countdown.sh && 5 -le 4 ]]
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
__vsc_is_windows=0
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
__vsc_stable="$VSCODE_STABLE"
unset VSCODE_STABLE
[ "$__vsc_stable" = "0" ]
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
__vsc_is_windows=0
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
__vsc_stable="$VSCODE_STABLE"
unset VSCODE_STABLE
[ "$__vsc_stable" = "0" ]
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
__vsc_is_windows=0
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
__vsc_stable="$VSCODE_STABLE"
unset VSCODE_STABLE
[ "$__vsc_stable" = "0" ]
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
[[ -x countdown.sh || 5 -le 4 ]]
[[ -x countdown.sh && -n 5 || -n 4 ]]
[[ -x countdown.sh || 5 -le 4 ]]
nano countdown.sh
nano countdown.sh
nano countdown.sh
nano countdown.sh
./countdown.sh 1
./countdown.sh -2
help
nano countdown.sh
nano countdown.sh
./countdown.sh 10
help
ls --color=auto /
ls --color=auto /bin/
ls --color=auto /bin
man sleep
sleep 3
nano countdown.sh
./countdown.sh 3
nano countdown.sh
./countdown.sh 3
nano countdown.sh
nano countdown.sh
./countdown.sh 1
nano countdown.sh
nano countdown.sh
help while
nano countdown.sh
nano countdown.sh
nano countdown.sh
nano countdown.sh
nano countdown.sh
./countdown.sh 5
touch bingo.sh
chmod +x bingo.sh
nano bingo.sh
nano bingo.sh
nano bingo.sh
echo "NUMBER=5" >> bingo.sh
echo "echo $NUMBER" >> bingo.sh
nano bingo.sh
./bingo.sh
printenv
echo LANG
echo $LANG
declare -p
echo $RANDOM
nano bingo.sh
./bingo.sh
./bingo.sh
nano bingo.sh
.bi
./bingo.sh
I=0
echo $I
(( I++ ))
echo $I
help let
(( I += 10 ))
echo $I
$(( I + 4 ))
15
echo $(( I + 4 ))
echo $I
J=0
$(( J - 6 ))
J=$(( i - 6 ))
J=$(( I - 6 ))
echo J
echo $J
echo J*5 +25
echo $J*5 +25
echo $(( J*5+25 ))
echo $J
__vsc_prompt_cmd_original
declare -p
declare -p J
declare -p RANDOM
echo RANDOM % 75
__vsc_prompt_cmd_original
echo $(( RANDOM % 75 ))
echo $(( RANDOM % 75 + 1))
nano bingo.sh
./bingo.sh
./bingo.sh
nano bingo.sh
nano bingo.sh
help let
nano bingo.sh
nano bingo.sh
nano bingo.sh
nano bingo.sh
nano bingo.sh
nano bingo.sh
nano bingo.sh
nano bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
nano bingo.sh
nano bingo.sh
nano bingo.sh
nano bingo.sh
./bingo.sh
./bingo.sh
touch fortune.sh
chmod +x fortune.sh
nano fortune.sh
echo "#Program to tell a persons fortune" >> fortune.sh
nano fortune.sh
./fortune.sh
ARR=("a" "b" "c")
echo ${ARR[1]}
echo $@
echo ${ARR[@]}
declare -p
declare -p ARR
nano fortune.sh
nano fortune.sh
nano fortune.sh
./fortune.sh
nano fortune.sh
nano fortune.sh
nano fortune.sh
nano fortune.sh
nano fortune.sh
nano fortune.sh
nano fortune.sh
nano fortune.sh
nano fortune.sh
nano fortune.sh
nano fortune.sh
nano fortune.sh
nano fortune.sh
nano fortune.sh
nano fortune.sh
help
help function
nano fortune.sh
nano fortune.sh
nano fortune.sh
nano fortune.sh
nano fortune.sh
nano fortune.sh
nano fortune.sh
./fortune.sh
nano fortune.sh
nano fortune.sh
./fortune.sh
help
help until
./fortune.sh
nano fortune.sh
./fortune.sh
help [[ ? ]]
[[ hello == hello ]]
[[ hello == world ]]
[[ hello =~ el ]]
__vsc_prompt_cmd_original
[[ "hello world" =~ "lo wor" ]]
[[ "hello world" =~ ^h ]]
[[ "hello world" =~ ^h.+d$ ]]
VAR="hello world"
echo $VAR
[[ $VAR == "hello world" ]]
[[ $VAR == "hello world" ]]
ls --color=auto
[[ $VAR == \?$ ]]
[[ $VAR =~ \?$ ]]
[[ test? =~ \?$ ]]
nano fortune.sh
nano fortune.sh
./fortune.sh
./fortune.sh
nano fortune.sh
nano fortune.sh
nano fortune.sh
nano fortune.sh
nano fortune.sh
nano fortune.sh
nano fortune.sh
./fortune.sh
nano fortune.sh
./fortune.sh
touch five.sh
chmod +x five.sh
nano five.sh
echo "#Program to run my other four programs" >> five.sh
echo "./questionnaire.sh" >> five.sh
./five.sh
echo "./countdown.sh 3" >> five.sh
echo "./bingo.sh" >> five.sh
echo "./fortune.sh" >> five.sh
clear
./five.sh
help
help type
type echo
type read
type if
type then
type bash
type psql
type ./five.sh
exit
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
__vsc_is_windows=0
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
__vsc_stable="$VSCODE_STABLE"
unset VSCODE_STABLE
[ "$__vsc_stable" = "0" ]
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
__vsc_is_windows=0
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
__vsc_stable="$VSCODE_STABLE"
unset VSCODE_STABLE
[ "$__vsc_stable" = "0" ]
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
